@if (TotalPages > 0)
{
    <ul class="uk-pagination my-1 @AlignClass" uk-margin>
        <li class="@((PageIndex == 1) ? "uk-disabled" : "uk-enabled")">
            <a @onclick="@(() => OnClick.InvokeAsync(1))">
                <i class="icon-line-awesome-chevron-left" aria-hidden="true"></i>
            </a>
        </li>
        <li class="@(HasPreviousPage ? "uk-enabled" : "uk-disabled")">
            <a @onclick="@(() => OnClick.InvokeAsync(PageIndex - 1))">
                <i uk-pagination-previous></i>
            </a>
        </li>
        <li class="uk-active">
            <span>@PageIndex</span>
        </li>
        <li class="@(HasNextPage ? "uk-enabled" : "uk-disabled")">
            <a @onclick="@(() => OnClick.InvokeAsync(PageIndex + 1))">
                <i uk-pagination-next></i>
            </a>
        </li>
        <li class="@((PageIndex == TotalPages) ? "uk-disabled" : "uk-enabled")">
            <a @onclick="@(() => OnClick.InvokeAsync(TotalPages))">
                <i class="icon-line-awesome-chevron-right"></i>
            </a>
        </li>
    </ul>
}

<style>
    .pager button, .pager span {
        padding-left: 10px;
        padding-right: 10px;
    }
</style>

@code {
    [Parameter]
    public int PageIndex { get; set; }

    [Parameter]
    public int TotalPages { get; set; }

    [Parameter]
    public bool HasPreviousPage { get; set; }

    [Parameter]
    public bool HasNextPage { get; set; }

    [Parameter]
    public EventCallback<int> OnClick { get; set; }

    [Parameter]
    public string AlignClass { get; set; }

}